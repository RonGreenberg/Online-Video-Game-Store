// defining an event handler for the built-in onhashchange event
window.onhashchange = function() {
    selectPage(window.location.hash);
}

function selectPage(hashKey) {
    // redirecting to dashboard page if no page was specified in the URL
    if (hashKey == '') {
        window.location.hash = "dashboard"; // invokes the onhashchange handler, which calls selectPage again
        return; // happens immediately, without waiting for the hashchange handler to finish
    }

    // hiding all page divs, except for the newly selected one
    var pages = document.querySelectorAll(".page");
    for (var i = 0; i < pages.length; i++) {
        pages[i].style.display = 'none';
        if (pages[i].id == hashKey.substring(1)) { // comparing the page id to the given hash, trimming the #
            pages[i].style.display = 'block';
        }
    }

    // removing highlight from all sidebar buttons, but highlighting the one that was just clicked
    var sidebarBtns = document.querySelectorAll(".sidebar ul li");
    for (var i = 0; i < sidebarBtns.length; i++) {
        sidebarBtns[i].removeAttribute("class");
        if (sidebarBtns[i].querySelector("a").href.endsWith(hashKey)) { // e.g. http://localhost:8080/#home ends with #home
            sidebarBtns[i].classList.add("active");
        }
    }

    // calling the appropriate rendering function for the page itself
    switch (hashKey) {
        case "#about":
            renderAbout();
            break;
        case "#customers":
            renderCustomers();
            break;
    }
}

function renderAbout() {
    // filling the page with the contents of the developers collection (eventually, would become a map with markers)
    readAndFillTable($("#about"), "developers", false, false);
}

function renderCustomers() {
    // filling the page with the contents of the customers collection
    readAndFillTable($("#customers"), "customers");
}

// providing optional parameters indicating whether to include edit/delete buttons in the generated table
function readAndFillTable(page, collection, withEditBtn = true, withDeleteBtn = true) {
    // sending an HTTP GET request to the appropriate route in the server
    $.get('read?collection=' + collection, function(data, status) {
        // constructing the html with the contents we received from the server, shown as a table
        var html = '';
        for (var i = 0; i < data.length; i++) {
            html += "<tr>";
            for (var field in data[i]) {
                // we don't want to display a column for the _id auto-generated by MongoDB (but we do need it for editing)
                if (field != '_id') {
                    /* Every element in HTML can have a data-* attribute, that we can use to store some information. In order to access it from a script
                     * later, we can use the "dataset" property. In this case we want to store the name of the column each td belongs to, because
                     * for editing a record, we need to take the data from the row in the table and paste it in the input fields, so that they can be
                     * edited. In order to know which input element belongs to which cell, we can store the column name in each td and compare it
                     * to the id of the <input>.
                     */
                    html += '<td data-colname="' + field + '">' + data[i][field] + "</td>";
                }
            }

            // in each row, adding the action buttons (edit/delete) that were requested

            var actionBtns = '';
            if (withEditBtn) {
                // storing the _id from MongoDB as an attribute of the button, so that we can send it to MongoDB to update this specific row
                actionBtns += '<button type="button" class="btn-action btn-edit" data-id="' + data[i]["_id"] + '">Edit</button>';
            }
            if (withDeleteBtn) {
                // storing the _id from MongoDB as an attribute of the button, so that we can send it to MongoDB to delete this specific row
                actionBtns += '<button type="button" class="btn-action btn-delete" data-id="' + data[i]["_id"] + '">Delete</button>';
            }
            if (actionBtns != '') { // adding the buttons to the html we will append, only if they were actually requested. They will be located in the same table cell
                html += '<td>' + actionBtns + '</td>';
            }
            html += "</tr>"; // closing the current row
        }

        // we also need to append a header in the table for the buttons, if they exist
        if (withEditBtn || withDeleteBtn) {
            // appending the header only if it isn't already there
            if (page.find(".action-header").length == 0) { // searching among page's children
                page.find("table thead tr").append('<th class="action-header">Action</th>'); // giving the header a class that we can use in the above if statement to check if it exists
            }
        }

        page.find("table tbody").empty(); // removing previous contents of the table body if there were any (if we visited this page earlier)
        page.find("table tbody").append(html); // appending the new html
    });
}
